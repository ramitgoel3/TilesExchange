//#include <iostream>
//
//int main(int argc, const char * argv[]) {
//    // insert code here...
//    std::cout << "Hello, World!\n";
//    return 0;
//}


#include<stdlib.h>
#define GL_SILENCE_DEPRECATION  //It will silence openGL warning on macos mojave
#include<GLUT/glut.h>
#include <OpenGl/glu.h>
#include <unistd.h>
#include<stdio.h>
#include<iostream>
//#include<stdlib.h>

using namespace std;
#define maxx 11
#define maxy 11
#define dx 50
#define dy 50
typedef struct cell
        {
    GLfloat x0,y0,x1,y1;
    int color;
        }cellt;
cellt board[20][20];
GLfloat color[5][3]={{0,0,1},{0,1,0},{1,0,0},{1,1,0},{1,1,1}};
GLfloat x0=0,y0=0;
GLint i,j,stroke=0,pastx,pasty,nextx,nexty,swapthetwo=0,vanishing=0,whitecount=0;
void init()
{int i=0,j=0;
int exzero,exone,extwo,exthree;
int compositebin;
int newarr[3];
    glClearColor(1.0,1.0,1.0,1.0);
    glColor3f(1.0,0.0,0.0);
    glPointSize(5.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0,499.0,0.0,499.0);
    glutPostRedisplay();
    for(i=0;i<maxx;i++)
        for(j=0;j<maxy;j++)
        {exzero=exone=extwo=exthree=0;
            board[i][j].x0=x0+i*dx+1;
            board[i][j].x1=x0+(i+1)*dx-1;
            board[i][j].y0=y0+j*dy+1;
            board[i][j].y1=y0+(j+1)*dy-1;
            if((i-1)>=0&&board[i-1][j].color==0&&(i-2)>=0&&board[i-2][j].color==0)
                exzero=1;
            if((i-1)>=0&&board[i-1][j].color==1&&(i-2)>=0&&board[i-2][j].color==1)
                exone=1;
            if((i-1)>=0&&board[i-1][j].color==2&&(i-2)>=0&&board[i-2][j].color==2)
                extwo=1;
            if((i-1)>=0&&board[i-1][j].color==3&&(i-2)>=0&&board[i-2][j].color==3)
                            exthree=1;
            if((j-1)>=0&&board[i][j-1].color==0&&(j-2)>=0&&board[i][j-2].color==0)
                exzero=1;
            if((j-1)>=0&&board[i][j-1].color==1&&(j-2)>=0&&board[i][j-2].color==1)
                exone=1;
            if((j-1)>=0&&board[i][j-1].color==2&&(j-2)>=0&&board[i][j-2].color==2)
                extwo=1;
            if((j-1)>=0&&board[i][j-1].color==3&&(j-2)>=0&&board[i][j-2].color==3)
                            exthree=1;
            compositebin=exzero|exone<<1|extwo<<2|exthree<<3;
        //    cout<<compositebin<<" ";
            switch(compositebin)
            {
            case 0:board[i][j].color=rand()%4;break;
            case 1:board[i][j].color=rand()%2?1:2;break;
            case 2:board[i][j].color=rand()%2?0:2;break;
            case 3:board[i][j].color=2;break;
            case 4:board[i][j].color=rand()%2?1:0;break;
            case 5:board[i][j].color=1;break;
            case 6:board[i][j].color=0;break;
            case 7:break;
            case 8:board[i][j].color=rand()%2?rand()%2?0:1:2;break;
            case 9:board[i][j].color=rand()%2?1:2;break;
            case 10:board[i][j].color=rand()%2?0:2;break;
            case 11:board[i][j].color=2;break;
            case 12:board[i][j].color=rand()%2?1:0;break;
            case 13:board[i][j].color=1;break;
            case 14:board[i][j].color=0;break;
            case 15:break;
            }

        }
}
void vanishup(int i,int j)
{
    board[i][j].color=4;
    board[i][j+1].color=4;
    board[i][j+2].color=4;

whitecount+=3;
}
void vanishleft(int i,int j)
{
    board[i][j].color=4;
    board[i-1][j].color=4;
    board[i-2][j].color=4;
    whitecount+=3;
}
void vanishdown(int i,int j)
{

    board[i][j].color=4;
    board[i][j-1].color=4;
    board[i][j-2].color=4;
    whitecount+=3;

}
void vanishright(int i,int j)
{

    board[i][j].color=4;
    board[i+1][j].color=4;
    board[i+2][j].color=4;
    whitecount+=3;
}

void display(void)
{int flag,flag1,col,k;
static int movecount=0;
    glClear(GL_COLOR_BUFFER_BIT);

    //drawing the board
    for(i=0;i<maxx-1;i++)
    {
        for(j=0;j<maxy-1;j++)
        {

             glColor3fv(color[board[i][j].color]);

         glBegin(GL_POLYGON);
                          glVertex2f(board[i][j].x0,board[i][j].y0);
                          glVertex2f(board[i][j].x0,board[i][j].y1);
                          glVertex2f(board[i][j].x1,board[i][j].y1);
                          glVertex2f(board[i][j].x1,board[i][j].y0);
                          glEnd();
                          glColor3f(0.0,0.0,0.0);
                         glBegin(GL_LINE_LOOP);
                        glVertex2f(board[i][j].x0,board[i][j].y0);
                        glVertex2f(board[i][j].x0,board[i][j].y1);
                        glVertex2f(board[i][j].x1,board[i][j].y1);
                        glVertex2f(board[i][j].x1,board[i][j].y0);
                                          glEnd();


        }
    }

    //detecting three colors in a row
    if(!whitecount)
    {
        for(i=0;i<maxx-1;i++)
        {
            for(j=0;j<maxy-1;j++)
            {
                flag=0;
                col=10;
                for(k=0;k<3;k++)
                {
                    if(k==0)
                        if(((j+k)<maxy-1))
                            col=board[i][j+k].color;
                if(((j+k)<maxy-1))
                {    if(board[i][j+k].color!=col)
                    {flag=1;
                break;}
                }
                else flag=1;
                }
                if(!flag&&!vanishing)
                    vanishup(i,j);
                    //printf("vanish up\n");
                flag=0;
                col=10;
                for(k=0;k<3;k++)
                {
                    if(k==0)
                        if((j-k)>=0)
                        col=board[i][j-k].color;
                if(((j-k)>=0))
                {    if(board[i][j-k].color!=col)
                    {flag=1;
                break;}
                }
                else flag=1;
                }
                if(!flag&&!vanishing)
                    vanishdown(i,j);
                    //printf("vanish down\n");
                flag=0;
                col=10;
                for(k=0;k<3;k++)
                {
                    if(k==0)
                        if(((i+k)<maxx-1))
                            col=board[i+k][j].color;
                if(((i+k)<maxx-1))
                {    if(board[i+k][j].color!=col)
                    {flag=1;
                break;}
                }
                else flag=1;
                }
                if(!flag&&!vanishing)
                    vanishright(i,j);
                    //printf("vanish right\n");
                flag=0;
                col=10;
                for(k=0;k<3;k++)
                {
                    if(k==0)
                        if(((i-k)>=0)) col=board[i-k][j].color;
                if(((i-k)>=0))
                {    if(board[i-k][j].color!=col)
                    {flag=1;
                break;}
                } else flag=1;
                }
                if(!flag&&!vanishing)
                    vanishleft(i,j);
                    //printf("vanish left\n");

            }
        }
    }
    usleep(10000); //1000000 will sleep for 1 sec
    //move all blocks down if white spaces exist(some blocks vanished)

flag1=0;
    for(i=0;i<maxx-1;i++)
            {
                for(j=0;j<maxy-1;j++)
                {

                    if(board[i][j].color==4) //if any board color white
                    {
                    if((j+1)<(maxy-1))      // if any board position not above board
                    {    board[i][j].color=board[i][j+1].color;//move above color

                    board[i][j+1].color=4;                       // to below

                    }
                    else
                        {board[i][j].color=4;
                        whitecount--;
                        }
                    }
                    //else movecount--;

                }

            }
    if(flag1) movecount=0;
    cout<<movecount<<" "<<whitecount<<" ";

    usleep(10000);  //10000 means will sleep for 10 ms //1000000

    glFlush();
    glutSwapBuffers();
}
void mouse(int btn,int status,int x,int y)
{int i1,j1,i2,j2,i,j,c2,flag=0; //,c1 unused
    y=500-y;

    if(stroke==0&&btn==GLUT_LEFT_BUTTON&&status==GLUT_DOWN)
{
    stroke=1;
    pastx=x;
    pasty=y;
    //printf("pastx=%d,%d\n",pastx/dx,pasty/dy);
}
    if(stroke==1&&btn==GLUT_LEFT_BUTTON&&status==GLUT_UP)
    {
stroke=0;
nextx=x;
nexty=y;
//printf("nextx=%d,%d\n",nextx/dx,nexty/dy);
if(abs(pastx/dx-nextx/dx)==1&&pasty/dy==nexty/dy)
{
/*i1=nextx/dx;        //position of mouse release
j1=nexty/dy;
c1=board[i1][j1].color;
i2=pastx/dx;        // position of first press
j2=pasty/dy;
c2=board[i2][j2].color;
flag=0;
for(j=j1;j<(j1+3);j++)
if(board[i1][j].color!=c2)
    flag=1;
if(!flag)
    printf("vanish top\n");
flag=0;
for(j=j1;j>(j1-3);j--)
if(board[i1][j].color!=c2)
    flag=1;
if(!flag)
    printf("vanish down\n");
flag=0;

for(i=i1;i<(i1+3);i++)
if(board[i][j1].color!=c2)
    flag=1;
if(!flag)
    printf("vanish right\n");
flag=0;

for(i=i1;i>(i1-3);i--)
if(board[i][j1].color!=c2)
    flag=1;
if(!flag)
    printf("vanish left\n");*/
swapthetwo=1;
//glFlush();
}
if(abs(pasty/dy-nexty/dy)==1&&pastx/dx==nextx/dx)
{
/*    i1=nextx/dx;        //position of mouse release
    j1=nexty/dy;
    c1=board[i1][j1].color;
    i2=pastx/dx;        // position of first press
    j2=pasty/dy;
    c2=board[i2][j2].color;
    flag=0;
    for(j=j1;j<(j1+3);j++)
    if(board[i1][j].color!=c2)
        flag=1;
    if(!flag)
        printf("vanish top\n");
    flag=0;
    for(j=j1;j>(j1-3);j--)
    if(board[i1][j].color!=c2)
        flag=1;
    if(!flag)
        printf("vanish down\n");
    flag=0;

    for(i=i1;i<(i1+3);i++)
    if(board[i][j1].color!=c2)
        flag=1;
    if(!flag)
        printf("vanish right\n");
    flag=0;

    for(i=i1;i>(i1-3);i--)
    if(board[i][j1].color!=c2)
        flag=1;
    if(!flag)
        printf("vanish left\n");*/
    swapthetwo=1;
}
}
    }


void idle(void)
{int temp;
if(swapthetwo)
{swapthetwo=0;
    temp=board[pastx/dx][pasty/dy].color;
    board[pastx/dx][pasty/dy].color=board[nextx/dx][nexty/dy].color;
    board[nextx/dx][nexty/dy].color=temp;
printf("swapped");
}

glutPostRedisplay();
}
int main(int argc,char **argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);
    glutInitWindowSize(500,500);
    glutInitWindowPosition(0,0);
    glutCreateWindow("Candy Crush");
    glutDisplayFunc(display);
//    glutMotionFunc(motion);
    glutIdleFunc(idle);
    glutMouseFunc(mouse);
    init();
    glutMainLoop();
    return(0);
}
